// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  senha       String
  genero      String
  cpf         String
  telefone    String
  cep         String
  rua         String
  bairro      String
  complemento String
  cidade      String
  estado      String
  fotoPerfil  String?
}

model Medico {
  id                       Int     @id @default(autoincrement())
  email                    String  @unique
  senha                    String
  crm                      String
  especialidade            String
  telefone                 String
  rqe                      String
  universidade             String
  anoFormatura             String
  resumoCurriculo          String
  fotoPerfil               String?
  fotoCrm                  String?
  documentoIdentidade      String?
  certificadoEspecializacao String?
  valorPadraoConsulta      Float
  tempoMedioConsulta       Int
}

model Prontuario {
  id          Int      @id @default(autoincrement())
  pacienteId  Int
  medicoId    Int
  data        DateTime @default(now())
  descricao   String
  observacoes String?
  // Relacionamentos (opcional, se tiver modelos de Paciente e Medico)
  // paciente   Paciente @relation(fields: [pacienteId], references: [id])
  // medico     Medico   @relation(fields: [medicoId], references: [id])
}

model Agendamento {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  pacienteId Int
  medicoId   Int
  dataHora   DateTime
  status     StatusAgendamento @default(PENDENTE)
  observacao String?

  // Relacionamentos opcionais
  // paciente   Paciente @relation(fields: [pacienteId], references: [id])
  // medico     Medico   @relation(fields: [medicoId], references: [id])
}

enum StatusAgendamento {
  PENDENTE
  EM_ANDAMENTO
  CANCELADA
  FINALIZADA
}